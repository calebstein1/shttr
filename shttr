#!/bin/sh

splash() {
  cat <<EOF
******************************
*  ____  _     _   _         *
* / ___|| |__ | |_| |_ _ __  *
* \___ \| '_ \| __| __| '__| *
*  ___) | | | | |_| |_| |    *
* |____/|_| |_|\__|\__|_|    *
*                            *
******************************                          

EOF
}

check_installed() {
  [ -d ~/.local/share/shttr ] && installed=1
  if [ -z $installed ]; then
    echo "No Shttr framework installed! Installing latest Shttr framework now..."
    install_framework
  fi
}

show_help() {
  cat <<EOF
Shttr CLI is the CLI client for Shell on the Shttr apps.
On each run, shttr will check for an installed backend to use for new apps,
and if one is not found, it will be installed automatically to '~/.local/share/shttr'.

Usage:
  shttr n [app name] - Creates a new Shttr app and populates it with the demo page.
  shttr c - Compiles all stylesheets into one asset in the assets/public directory. If 'sass' is available in PATH, it automatically compiles all scss files to css.
  shttr d - When run in the root directory of a Shttr app, precompiles all css and syncs the app to the server using rsync.
  shttr g page [page name] - Generates a new blank page named "page name." This creats the cgi-bin script, a barebones controller, and a blank model and view.
  shttr u - When run in the root directory of a Shttr app, updates the shttr installation bundled with that app.
  shttr su - Updates the system installed Shttr backend.

EOF
}

install_framework() {
  mkdir -p ~/.local/share
  git clone https://github.com/calebstein1/sh-on-the-shttr.git ~/.local/share/shttr
}

create_project() {
  if [ -z $1 ]; then
    proj="shttr_$(date +%s)"
  else
    proj=$1
  fi

  if [ -e $proj ]; then
    echo "Directory already exists!"
    exit 1
  fi

  echo "Creating project directory ${proj}..."
  mkdir $proj
  echo "Copying Shttr app files into ${proj}..."
  cp -r ~/.local/share/shttr/shttr $proj
  cp -r ~/.local/share/shttr/cgi-bin $proj
  echo "Creating Shttr config file..."
  echo "user@example.com" > ${proj}/shttr-config
  echo "${proj}" > ${proj}/.shttr
  echo "Done!"
}

compile_assets() {
  verify_shttr_app

  mkdir -p shttr/app/assets/public
  rm shttr/app/assets/public/*.css 2>/dev/null

  sass_path=$(which sass 2>/dev/null)

  for sheet in $(find shttr/app/assets/stylesheets); do
    if [ "${sheet#*.}" = "css" ]; then
      cat ${sheet} >> shttr/app/assets/public/style.css
    elif [ "${sheet#*.}" = "scss" ]; then
      if [ -z $sass_path ] ; then
        echo "Sass must be installed in order to compile scss files."
      else
        sass ${sheet} >> shttr/app/assets/public/style.css
      fi
    fi
  done

  compiled_css_digest=$(sha256sum shttr/app/assets/public/style.css | cut -d ' ' -f1)
  mv shttr/app/assets/public/style.css shttr/app/assets/public/style-${compiled_css_digest}.css

  echo "Stylesheets compiled successfully!"
}

deploy_project() {
  ssh_credentials=$(cat ./shttr-config 2>/dev/null)
  rsync_path=$(which rsync 2>/dev/null)

  if [ -z $ssh_credentials ]; then
    echo "No credentials found! Either this is not a Shttr app, or you deleted the shttr-config file.\nMake sure you're running 'shttr d' in the root of your app directory with a valid shttr-config."
    exit 1
  fi

  if [ -z $rsync_path ]; then
    echo "Rsync is not installed! Please install it and try again."
    exit 1
  fi

  echo "Deploying app..."
  compile_assets
  $rsync_path -avz --delete --exclude=storage shttr ${ssh_credentials}:/var/www/
  $rsync_path -avz --delete cgi-bin ${ssh_credentials}:/usr/lib/
}

generate_asset() {
  verify_shttr_app

  case $1 in
    page) generate_page $2;;
    *) echo "Invalid generator! Make sure you choose one of the following: page";;
  esac
}

generate_page() {
  page=$1
  if [ -z $page ]; then
    echo "You need to enter a name for your new page."
    exit 1
  fi

  echo "Generating page ${page}..."
  cp ~/.local/share/shttr/cgi-bin/index.sh cgi-bin/${page}.sh
  cat > shttr/app/controllers/${page}.sh <<EOF
TITLE="${page}"
export TITLE

MODEL_DATA=\$(sh \${SHTTR_APP}/models/\${CONTROLLER})
export MODEL_DATA

sh \${SHTTR_APP}/views/\${CONTROLLER}
EOF
  touch shttr/app/models/${page}.sh
  echo ". \${SHTTR_LIB}/esh\n\n" > shttr/app/views/${page}.sh
  mkdir shttr/app/views/${page}
  touch shttr/app/views/${page}/index.html
  echo "Done!"
}

update_app_shttr() {
  verify_shttr_app

  app_name=$(cat .shttr)
  echo "Updating Shttr backend for ${app_name}..."
  cp -r ~/.local/share/shttr/shttr/bin ./shttr
  cp -r ~/.local/share/shttr/shttr/lib ./shttr
  echo "Done! Make sure you update your app files to reflect any changes made by the new Shttr version."
}

update_system_shttr() {
  echo "Updating system installed Shttr backend..."
  cd ~/.local/share/shttr && git pull
}

verify_shttr_app() {
  [ -f .shttr ] && shttr=1
  if [ -z $shttr ]; then
    echo "This doesn't appear to be a Shttr app! Make sure you run this in the root of your Shttr app."
    exit 1
  fi
}

splash
check_installed

case $1 in
  n) create_project $2;;
  c) compile_assets;;
  d) deploy_project;;
  g) generate_asset $2 $3;;
  u) update_app_shttr;;
  su) update_system_shttr;;
  *) show_help;;
esac
