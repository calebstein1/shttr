#!/bin/sh

splash() {
  cat <<EOF
******************************
*  ____  _     _   _         *
* / ___|| |__ | |_| |_ _ __  *
* \___ \| '_ \| __| __| '__| *
*  ___) | | | | |_| |_| |    *
* |____/|_| |_|\__|\__|_|    *
*                            *
******************************                          

EOF
}

check_installed() {
  [ -d ~/.local/share/shttr ] && installed=1
  if [ -z $installed ]; then
    echo "No Shttr framework installed! Installing latest Shttr framework now..."
    install_framework
  fi
}

show_help() {
  cat <<EOF
Shttr CLI is the CLI client for Shell on the Shttr apps.
On each run, shttr will check for an installed backend to use for new apps,
and if one is not found, it will be installed automatically to '~/.local/share/shttr'.

Usage:
  shttr (n)ew [app name] [--framework-option] - Creates a new Shttr app and populates it with the demo page.
  shttr (c)ompile - Compiles all stylesheets into one asset in the assets/public directory.
  shttr (d)eploy [-c] - When run in the root directory of a Shttr app, syncs the app to the server using rsync. The -c flag compiles the stylesheets prior to deploying.
  shttr (g)enerate page [page name] - Generates a new blank page named "page name." This creats the cgi-bin script, a barebones controller, and a blank model and view.
  shttr (u)pdate - When run in the root directory of a Shttr app, updates the shttr installation bundled with that app.
  shttr su - Updates the system installed Shttr backend.

EOF
}

install_framework() {
  mkdir -p ~/.local/share
  git clone https://github.com/calebstein1/sh-on-the-shttr.git ~/.local/share/shttr
}

create_project() {
  if [ -z $1 ]; then
    proj="shttr_$(date +%s)"
  else
    proj=$1
  fi

  if [ -e $proj ]; then
    echo "Directory already exists!"
    exit 1
  fi

  echo "Creating project directory ${proj}..."
  mkdir $proj
  echo "Copying Shttr app files into ${proj}..."
  cp -r ~/.local/share/shttr/shttr $proj
  cp -r ~/.local/share/shttr/cgi-bin $proj
  cp ~/.local/share/shttr/.gitignore $proj
  cp ~/.local/share/shttr/.gitattributes $proj
  cp ~/.local/share/shttr/Dockerfile $proj
  echo "Creating Shttr config file..."
  echo "user@example.com" > ${proj}/shttr-config
  echo "${proj}" > ${proj}/.shttr
  echo "Installing node packages..."
  cd $proj
  npm install postcss postcss-cli autoprefixer sass
  cd ..
  case $2 in
    --tailwind) install_tailwind;;
    --bootstrap) install_bootstrap;;
    --empty) empty_project;;
  esac
  echo "Initializing git..."
  cd $proj
  git init
  echo "# ${proj}" > README.md
  cd ..
  echo "Done!"
}

install_tailwind() {
  empty_project

  echo "Installing Tailwind..."
  cd ${proj}
  npm install tailwindcss
  mkdir tailwind
  npx tailwindcss init tailwind/tailwind.config.js
  sed -i 's|content: \[\]|content: \["./shttr/app/views/**/*.html"\]|' tailwind/tailwind.config.js
  cat > tailwind/input.css <<EOF
@tailwind base;
@tailwind components;
@tailwind utilities;
EOF
  cd ..
  echo "Tailwind installed! Make sure you confirm that tailwind/tailwind.config.js looks good."
}

install_bootstrap() {
  empty_project

  bootstrap_ver="5.3.2"
  echo "Downloading Bootstrap..."
  curl -sLO https://github.com/twbs/bootstrap/releases/download/v${bootstrap_ver}/bootstrap-${bootstrap_ver}-dist.zip
  curl -sLO https://github.com/twbs/bootstrap/archive/v${bootstrap_ver}.zip
  echo "Installing Bootstrap..."
  unzip -q bootstrap-${bootstrap_ver}-dist.zip
  unzip -q v${bootstrap_ver}.zip
  cp -r bootstrap-${bootstrap_ver}/scss ${proj}/bootstrap
  cp bootstrap-${bootstrap_ver}-dist/js/bootstrap.bundle.js ${proj}/shttr/app/assets/scripts/vendored/
  rm bootstrap-${bootstrap_ver}-dist.zip
  rm v${bootstrap_ver}.zip
  rm -rf bootstrap-${bootstrap_ver}-dist
  rm -rf bootstrap-${bootstrap_ver}
  cat > ${proj}/shttr/app/assets/stylesheets/custom.scss <<EOF
//custom.scss

//Enter custom SCSS to customize Bootstrap here

@import "../../../../bootstrap/bootstrap";
EOF
}

empty_project() {
  rm -rf ${proj}/shttr/app/assets/stylesheets/vendored ${proj}/shttr/app/assets/public/* ${proj}/shttr/app/assets/images ${proj}/cgi-bin/* ${proj}/shttr/app/controllers/* ${proj}/shttr/app/models/* ${proj}/shttr/app/views/*
  rm ${proj}/shttr/app/assets/package.json
  cp -r ~/.local/share/shttr/shttr/app/views/shared ${proj}/shttr/app/views
  rm ${proj}/shttr/app/views/shared/nav.html
}

compile_assets() {
  verify_shttr_app

  npm i --prefix=shttr/app/assets

  mkdir -p shttr/app/assets/public
  rm shttr/app/assets/public/*.css 2>/dev/null

  [ -d "./tailwind" ] && npx tailwindcss -c tailwind/tailwind.config.js -i tailwind/input.css -o shttr/app/assets/public/style.css
  for sheet in $(find shttr/app/assets/stylesheets); do
    if [ "${sheet#*.}" = "css" ]; then
      cat ${sheet} >> shttr/app/assets/public/style.css
    elif [ "${sheet#*.}" = "scss" ]; then
      if [ "$(echo ${sheet##*/} | cut -c1)" = "_" ]; then
        continue
      else
        npx sass ${sheet} >> shttr/app/assets/public/style.css
      fi
    fi
  done

  [ -f shttr/app/assets/public/style.css ] || return

  npx postcss shttr/app/assets/public/style.css --use autoprefixer -r --no-map
  compiled_css_digest=$(sha256sum shttr/app/assets/public/style.css | cut -d ' ' -f1)
  mv shttr/app/assets/public/style.css shttr/app/assets/public/style-${compiled_css_digest}.css

  echo "Stylesheets compiled successfully!"
}

init_db() {
  verify_shttr_app
  ssh_credentials=$(cat ./shttr-config 2>/dev/null)
  if [ -z $ssh_credentials ]; then
    echo "No credentials found! Either this is not a Shttr app, or you deleted the shttr-config file.\nMake sure you're running 'shttr db:init' in the root of your app directory with a valid shttr-config."
    exit 1
  fi

  echo "Initializing shttrdb on server..."
  ssh -4 $ssh_credentials "mkdir -p /var/shttrdb && chown -R www-data:www-data /var/shttrdb"
  echo "Done!"
}

pull_db() {
  verify_shttr_app
  ssh_credentials=$(cat ./shttr-config 2>/dev/null)
  rsync_path=$(which rsync 2>/dev/null)
  if [ -z $ssh_credentials ]; then
    echo "No credentials found! Either this is not a Shttr app, or you deleted the shttr-config file.\nMake sure you're running 'shttr db:init' in the root of your app directory with a valid shttr-config."
    exit 1
  fi

  if [ -z $rsync_path ]; then
    echo "Rsync is not installed! Please install it and try again."
    exit 1
  fi

  echo "Pulling DB from server..."
  rsync -avz4 --delete ${ssh_credentials}:/var/shttrdb ./
  echo "Done!"
}

push_db() {
  verify_shttr_app
  ssh_credentials=$(cat ./shttr-config 2>/dev/null)
  rsync_path=$(which rsync 2>/dev/null)
  if [ -z $ssh_credentials ]; then
    echo "No credentials found! Either this is not a Shttr app, or you deleted the shttr-config file.\nMake sure you're running 'shttr db:init' in the root of your app directory with a valid shttr-config."
    exit 1
  fi

  if [ -z $rsync_path ]; then
    echo "Rsync is not installed! Please install it and try again."
    exit 1
  fi

  echo "Pushing DB to server..."
  rsync -avz4 --delete ./shttrdb ${ssh_credentials}:/var/
  init_db
}

deploy_project() {
  verify_shttr_app

  echo "Building Docker image..."
  [ "$1" = "-c" ] && compile_assets
  docker build -t $(cat .shttr) .
  zip -r $(cat .shttr) shttr/ cgi-bin/ Dockerfile
}

generate_asset() {
  verify_shttr_app

  case $1 in
    page) generate_page $2;;
    *) echo "Invalid generator! Make sure you choose one of the following: page";;
  esac
}

generate_page() {
  page=$1
  if [ -z $page ]; then
    echo "You need to enter a name for your new page."
    exit 1
  fi

  echo "Generating page ${page}..."
  cp ~/.local/share/shttr/cgi-bin/index.sh cgi-bin/${page}.sh
  cat > shttr/app/controllers/${page}.sh <<EOF
TITLE="${page}"
export TITLE

. \${SHTTR_APP}/models/\${CONTROLLER}

. \${SHTTR_APP}/views/\${CONTROLLER}
EOF
  touch shttr/app/models/${page}.sh
  if [ -f shttr/app/views/shared/nav.html ]; then
    cat > shttr/app/views/${page}.sh <<EOF
use esh

v shared/app.html
v shared/nav.html
v index.html
v shared/btm.html
EOF
  else
    cat > shttr/app/views/${page}.sh <<EOF
use esh

v shared/app.html
v index.html
v shared/btm.html
EOF
  fi
  mkdir shttr/app/views/${page}
  touch shttr/app/views/${page}/index.html
  echo "Done!"
}

remove_asset() {
  verify_shttr_app

  case $1 in
    page) remove_page $2;;
    *) echo "Invalid generator! Make sure you choose one of the following: page";;
  esac
}

remove_page() {
  page=$1

  echo "Removing page ${page}..."
  [ -f cgi-bin/${page}.sh ] && rm cgi-bin/${page}.sh
  [ -f shttr/app/controllers/${page}.sh ] && rm shttr/app/controllers/${page}.sh
  [ -f shttr/app/models/${page}.sh ] && rm shttr/app/models/${page}.sh
  [ -f shttr/app/views/${page}.sh ] && rm shttr/app/views/${page}.sh
  [ -d shttr/app/views/${page} ] && rm shttr/app/views/${page}/* && rmdir shttr/app/views/${page}
  echo "Done!"
}

run_server() {
  verify_shttr_app

  echo "Starting server on localhost:3000\nCtrl+C to quit"
  docker run -p 3000:80 -v shttrdb:/var/shttrdb $(cat .shttr)
}

shttr_npm() {
  verify_shttr_app

  echo "Installing npm packages..."
  args="$@"
  npm_cmd="${args#* }"

  npm --prefix=shttr/app/assets ${npm_cmd}
}

shttr_debug() {
  verify_shttr_app
  if [ "$2" = "--post" ]; then
    data="$3"
  fi
  shttr-dbg $1 "$data"
}

update_app_shttr() {
  verify_shttr_app

  app_name=$(cat .shttr)
  echo "Updating Shttr backend for ${app_name}..."
  cp -r ~/.local/share/shttr/shttr/bin ./shttr
  cp -r ~/.local/share/shttr/shttr/lib ./shttr
  cp ~/.local/share/shttr/.gitignore ./
  cp ~/.local/share/shttr/.gitattributes ./
  cp ~/.local/share/shttr/Dockerfile ./
  echo "Done! Make sure you update your app files to reflect any changes made by the new Shttr version."
}

update_system_shttr() {
  echo "Updating system installed Shttr backend..."
  cd ~/.local/share/shttr && git pull
}

verify_shttr_app() {
  while [ -z $shttr ]; do
    [ -f .shttr ] && shttr=1 && break
    cd ..
    [ "$PWD" = "/" ] && break
  done
  if [ -z $shttr ]; then
    echo "This doesn't appear to be a Shttr app! Make sure you run this in the root of your Shttr app."
    exit 1
  fi
}

splash
check_installed

case $1 in
  n | new) create_project $2 $3;;
  c | compile) compile_assets;;
  d | deploy) deploy_project $2;;
  db:init) init_db;;
  db:pull) pull_db;;
  db:push) push_db;;
  g | generate) generate_asset $2 $3;;
  r | remove) remove_asset $2 $3;;
  s | server) run_server;;
  u | update-app) update_app_shttr;;
  su | update-system) update_system_shttr;;
  npm) shttr_npm "$@";;
  debug) shttr_debug $2 $3 $4 ;;
  *) show_help;;
esac
